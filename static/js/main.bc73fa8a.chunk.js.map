{"version":3,"sources":["images/hippo-footprints.png","components/Task/Task.jsx","images/mic.svg","components/Dictaphone/Dictaphone.jsx","ToDoList.jsx","reportWebVitals.js","index.js"],"names":["Task","id","task","index","moveTaskHandler","deleteTodo","ref","useRef","useDrop","accept","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","type","collect","isDragging","drag","className","style","opacity","src","deleteIcon","alt","onClick","Dictaphone","setValue","handleSubmit","useState","lang","setLang","recognizeEvents","SpeechRecognition","getRecognition","useSpeechRecognition","transcript","resetTranscript","useEffect","userlang","navigator","language","browserSupportsSpeechRecognition","onspeechend","event","micIcon","startListening","ToDoList","todosData","localStorage","getItem","JSON","parse","value","todos","setTodos","preventDefault","addTodo","text","setItem","stringify","newTodos","filter","i","useCallback","dragItem","update","$splice","count","generateKey","taskElement","map","clearClass","todo__clear_hidden","length","isMobile","window","innerWidth","onSubmit","autoFocus","placeholder","onChange","target","required","DndProvider","backend","TouchBackend","HTML5Backend","classNames","clear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAAe,MAA0B,6CCiF1BA,G,MA3EF,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,GAAIC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,gBAAiBC,EAAiB,EAAjBA,WAG1CC,EAAMC,iBAAO,MAH8C,EAIhDC,YAAQ,CACvBC,OAAQ,OACRC,MAFuB,SAEjBC,EAAMC,GAAU,IAAD,EACnB,GAAKN,EAAIO,QAAT,CAGA,IAAMC,EAAYH,EAAKR,MACjBY,EAAaZ,EAEnB,GAAIW,IAAcC,EAAlB,CAIA,IAAMC,EAAiB,UAAGV,EAAIO,eAAP,aAAG,EAAaI,wBAEjCC,GACHF,EAAkBG,OAASH,EAAkBI,KAAO,EAIjDC,EAFeT,EAAQU,kBAEKC,EAAIP,EAAkBI,IAKpDN,EAAYC,GAAcM,EAAeH,GAIzCJ,EAAYC,GAAcM,EAAeH,IAI7Cd,EAAgBU,EAAWC,GAK3BJ,EAAKR,MAAQY,QAtCRS,EAJwD,sBA8ClCC,YAAQ,CACrCd,KAAM,CAAER,QAAOF,KAAIC,OAAMwB,KAAM,QAC/BC,QAAS,SAACf,GAAD,MAAc,CACrBgB,WAAYhB,EAAQgB,iBAjDyC,wBA8CxDA,YASTC,EAvDiE,MAuD5DL,EAAKlB,IAOV,OACE,qBAAIwB,UAAU,aAAaxB,IAAKA,EAAKyB,MAAO,CAAEC,QAVnB,GAU3B,UACE,mBAAGF,UAAU,kBAAb,SAAgC5B,IAChC,qBACE4B,UAAU,mBACVG,IAAKC,EACLC,IAAI,aACJC,QAXa,WACjB/B,EAAWF,W,kECjEA,MAA0B,gCCkD1BkC,G,MA3CI,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aAAmB,EACzBC,mBAAS,OADgB,mBAC1CC,EAD0C,KACpCC,EADoC,KAI3CC,EAAkBC,IAAkBC,iBAJO,EAKTC,iCAAhCC,EALyC,EAKzCA,WAAYC,EAL6B,EAK7BA,gBAcpB,GAXAC,qBAAU,WACRX,EAASS,KACR,CAACT,EAAUS,IAGdE,qBAAU,WACR,IAAIC,EAAWC,UAAUC,SACzBV,EAAQQ,KACP,CAACR,EAASD,KAGRG,IAAkBS,mCACrB,OAAO,KAcT,OALAV,EAAgBW,YAAc,SAAUC,GACtChB,EAAagB,GACbP,KAIA,qBACElB,UAAU,MACVG,IAAKuB,EACLrB,IAAI,kBACJC,QAfgB,WAClBQ,IAAkBa,eAAe,CAAEL,SAAUX,SC6GlCiB,EAlIE,WACf,IAAIC,EAAYC,aAAaC,QAAQ,SACjCC,KAAKC,MAAMH,aAAaC,QAAQ,UAChC,GAHiB,EAKKrB,mBAAS,IALd,mBAKdwB,EALc,KAKP1B,EALO,OAMKE,mBAASmB,GANd,mBAMdM,EANc,KAMPC,EANO,KAcf3B,EAAe,SAACgB,GACpBA,EAAMY,iBACNC,EAAQJ,GACR1B,EAAS,KAIL8B,EAAU,SAACC,GACL,OAAVJ,EACIL,aAAaU,QAAQ,QAASR,KAAKS,UAAL,sBAAmBN,GAAnB,CAA0BI,MACxDT,aAAaU,QAAQ,QAASR,KAAKS,UAAU,KAE7CL,EADM,OAAVD,EACaH,KAAKC,MAAMH,aAAaC,QAAQ,UAChC,KAITxD,EAAa,SAACF,GAClB,IAAMqE,EAAWP,EAAMQ,QAAO,SAACvE,EAAMwE,GAAP,OAAaA,IAAMvE,KACjDyD,aAAaU,QAAQ,QAASR,KAAKS,UAAUC,IAE7CN,EAASJ,KAAKC,MAAMH,aAAaC,QAAQ,YAWrCzD,EAAkBuE,uBACtB,SAAC7D,EAAWC,GACV,IAAM6D,EAAWX,EAAMnD,GAEvB8C,aAAaU,QACX,QACAR,KAAKS,UACHM,IAAOZ,EAAO,CACZa,QAAS,CACP,CAAChE,EAAW,GACZ,CAACC,EAAY,EAAG6D,QAKxBV,EAASJ,KAAKC,MAAMH,aAAaC,QAAQ,aAE3C,CAACI,IAWCc,EAPgB,WAClB,IAAIA,EAAQ,EACZ,OAAO,WACL,OAAOA,KAICC,GAGNC,EACM,OAAVhB,EACIA,EAAMiB,KAAI,SAAChF,EAAMwE,GAAP,OACR,cAAC,EAAD,CACExE,KAAMA,EAENG,WAAYA,EACZF,MAAOuE,EACPzE,GAAI8E,IACJ3E,gBAAiBA,GAJZ2E,QAOT,GAGFI,EAAa,CACfC,oBAAqBnB,EAAMoB,QAEvBC,EAAWC,OAAOC,WAAa,IAErC,OACE,yBAAS1D,UAAU,OAAnB,SACE,sBAAKA,UAAU,gBAAf,UACE,oBAAIA,UAAU,cAAd,wBACA,uBAAMA,UAAU,aAAa2D,SAAUlD,EAAvC,UACE,uBACET,UAAU,cACVJ,KAAK,OACLgE,WAAS,EACT1B,MAAOA,EACP2B,YAAY,kBACZC,SAnGW,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBvD,EAASuD,EAAO7B,QAmGR8B,UAAQ,IAEV,cAAC,EAAD,CAAYxD,SAAUA,EAAUC,aAAcA,OAGhD,oBAAIT,UAAU,cAAd,SACE,cAACiE,EAAA,EAAD,CAAaC,QAASV,EAAWW,IAAeC,IAAhD,SAA+DjB,MAGjE,wBACEnD,UAAWqE,IAAW,cAAehB,GACrCzD,KAAK,SACLU,QAlFU,WAChBwB,aAAawC,QACblC,EAAS,IACT5B,EAAS,KA4EL,6BCrHO+D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bc73fa8a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hippo-footprints.9342d27d.png\";","import React, { useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\n\nimport deleteIcon from \"../../images/hippo-footprints.png\";\nimport \"./Task.scss\";\n\nconst Task = ({ id, task, index, moveTaskHandler, deleteTodo }) => {\n\n//Drag and drop(скопирован из библиотеки почти без изменений)\n  const ref = useRef(null);\n  const [, drop] = useDrop({\n    accept: \"task\",\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      moveTaskHandler(dragIndex, hoverIndex);\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { index, id, task, type: \"task\" },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const opacity = isDragging ? 1 : 1;\n\n  drag(drop(ref));\n\n  //Удаление таска\n  const deleteTask = () => {\n    deleteTodo(index);\n  };\n\n  return (\n    <li className=\"todo__task\" ref={ref} style={{ opacity }}>\n      <p className=\"todo__task-text\">{task}</p>\n      <img\n        className=\"todo__deleteIcon\"\n        src={deleteIcon}\n        alt=\"deleteIcon\"\n        onClick={deleteTask}\n      />\n    </li>\n  );\n};\n\nexport default Task;\n","export default __webpack_public_path__ + \"static/media/mic.8562e22a.svg\";","import React, { useEffect, useState } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport micIcon from \"../../images/mic.svg\";\nimport \"./Dictaphone.scss\";\n\nconst Dictaphone = ({ setValue, handleSubmit }) => {\n  const [lang, setLang] = useState(\"eng\");\n\n\n  const recognizeEvents = SpeechRecognition.getRecognition();\n  const { transcript, resetTranscript } = useSpeechRecognition();\n\n//Записываем результат голосового набора в value инпута\n  useEffect(() => {\n    setValue(transcript);\n  }, [setValue, transcript]);\n\n//Уставливаем язык голосового набора, основываясь на настройках браузера пользователя\n  useEffect(() => {\n    let userlang = navigator.language;\n    setLang(userlang);\n  }, [setLang, lang]);\n\n//Если разспонать головой набор не вышло, вернёт null\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return null;\n  }\n\n//Функция активирует головой набор\n  const startSpeech = () => {\n    SpeechRecognition.startListening({ language: lang });\n  };\n\n//Слушатель сабмитит результат голосового набора\n  recognizeEvents.onspeechend = function (event) {\n    handleSubmit(event);\n    resetTranscript();\n  };\n\n  return (\n    <img\n      className=\"mic\"\n      src={micIcon}\n      alt=\"Microphone icon\"\n      onClick={startSpeech}\n    />\n  );\n};\nexport default Dictaphone;\n","import React, { useState, useCallback } from \"react\";\nimport classNames from \"classnames/bind\";\nimport Task from \"./components/Task/Task\";\nimport update from \"immutability-helper\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from 'react-dnd-touch-backend'\n\nimport \"./ToDoList.scss\";\nimport Dictaphone from \"./components/Dictaphone/Dictaphone\";\n\nconst ToDoList = () => {\n  let todosData = localStorage.getItem(\"todos\")\n    ? JSON.parse(localStorage.getItem(\"todos\"))\n    : [];\n\n  const [value, setValue] = useState(\"\");\n  const [todos, setTodos] = useState(todosData);\n\n  //Обработка value инпута\n  const handleChange = ({ target }) => {\n    setValue(target.value);\n  };\n\n  //Оброботка сабмита\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  //Добавление таска\n  const addTodo = (text) => {\n    todos !== null\n      ? localStorage.setItem(\"todos\", JSON.stringify([...todos, text]))\n      : localStorage.setItem(\"todos\", JSON.stringify([]));\n    todos !== null\n      ? setTodos(JSON.parse(localStorage.getItem(\"todos\")))\n      : setTodos([]);\n  };\n\n  //Удаление таска\n  const deleteTodo = (index) => {\n    const newTodos = todos.filter((task, i) => i !== index);\n    localStorage.setItem(\"todos\", JSON.stringify(newTodos));\n\n    setTodos(JSON.parse(localStorage.getItem(\"todos\")));\n  };\n\n  //Удаление всех тасков\n  const clearTodo = () => {\n    localStorage.clear();\n    setTodos([]);\n    setValue(\"\");\n  };\n\n  //Обработка перетаскивания таска\n  const moveTaskHandler = useCallback(\n    (dragIndex, hoverIndex) => {\n      const dragItem = todos[dragIndex];\n\n      localStorage.setItem(\n        \"todos\",\n        JSON.stringify(\n          update(todos, {\n            $splice: [\n              [dragIndex, 1],\n              [hoverIndex, 0, dragItem],\n            ],\n          })\n        )\n      );\n      setTodos(JSON.parse(localStorage.getItem(\"todos\")));\n    },\n    [todos]\n  );\n\n  //Генерация ключей для массива\n  const generateKey = () => {\n    let count = 0;\n    return function () {\n      return count++;\n    };\n  };\n\n  let count = generateKey();\n\n  //Сборка тасков\n  const taskElement =\n    todos !== null\n      ? todos.map((task, i) => (\n          <Task\n            task={task}\n            key={count()}\n            deleteTodo={deleteTodo}\n            index={i}\n            id={count()}\n            moveTaskHandler={moveTaskHandler}\n          />\n        ))\n      : [];\n\n  //Скрытие кнопки удаления всех тасков, если тасков нет\n  let clearClass = {\n    todo__clear_hidden: !todos.length,\n  };\n  const isMobile = window.innerWidth < 600;\n\n  return (\n    <section className=\"todo\">\n      <div className=\"todo__content\">\n        <h1 className=\"todo__title\">Baka ToDos</h1>\n        <form className=\"todo__form\" onSubmit={handleSubmit}>\n          <input\n            className=\"todo__input\"\n            type=\"text\"\n            autoFocus\n            value={value}\n            placeholder=\"What's my task?\"\n            onChange={handleChange}\n            required\n          />\n          <Dictaphone setValue={setValue} handleSubmit={handleSubmit} />\n        </form>\n\n        <ul className=\"todo__tasks\">\n          <DndProvider backend={isMobile ? TouchBackend : HTML5Backend}>{taskElement}</DndProvider>\n        </ul>\n\n        <button\n          className={classNames(\"todo__clear\", clearClass)}\n          type=\"button\"\n          onClick={clearTodo}\n        >\n          Clear all\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default ToDoList;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport ToDoList from './ToDoList';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToDoList />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}